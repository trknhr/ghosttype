name: Release

on:
  push:
    tags: [ 'v*' ]          # v0.1.0 などのタグで実行
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: true
        type: string

env:
  APP_NAME: ghosttype
  GO_VERSION: '1.24'

jobs:
  # ───────────────────────────────
  # Linux (amd64 / arm64)
  # ───────────────────────────────
  build-linux:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        include:
          - goarch: amd64
            cc: gcc
            install_cross: ''
          - goarch: arm64
            cc: aarch64-linux-gnu-gcc
            install_cross: gcc-aarch64-linux-gnu

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install cross-compiler
        if: ${{ matrix.install_cross != '' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y ${{ matrix.install_cross }}

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build linux/${{ matrix.goarch }}
        env:
          GOOS: linux
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: '1'
          CC: ${{ matrix.cc }}
        run: |
          mkdir -p bin
          go build -tags=libsql -o bin/${{ env.APP_NAME }} ./main.go

      - name: Package
        run: |
          mkdir -p dist
          tar -C bin -czf dist/${{ env.APP_NAME }}_${{ github.ref_name }}_linux_${{ matrix.goarch }}.tar.gz ${{ env.APP_NAME }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-${{ matrix.goarch }}
          path: dist/*.tar.gz

  # ───────────────────────────────
  # macOS (amd64 / arm64)
  # ───────────────────────────────
  build-macos:
    runs-on: macos-latest

    strategy:
      fail-fast: false
      matrix:
        goarch: [ arm64 ]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build darwin/${{ matrix.goarch }}
        env:
          GOOS: darwin
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: '1'
        run: |
          mkdir -p bin
          go build -tags=libsql -o bin/${{ env.APP_NAME }} ./main.go

      - name: Package
        run: |
          mkdir -p dist
          tar -C bin -czf dist/${{ env.APP_NAME }}_${{ github.ref_name }}_darwin_${{ matrix.goarch }}.tar.gz ${{ env.APP_NAME }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: darwin-${{ matrix.goarch }}
          path: dist/*.tar.gz
  build-macos-amd64:
    runs-on: macos-13  # Intel macOS
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Build darwin/amd64
        env:
          CGO_ENABLED: '1'
        run: |
          mkdir -p bin
          go build -tags=libsql -o bin/${{ env.APP_NAME }} ./main.go

      - name: Package
        run: |
          mkdir -p dist
          tar -C bin -czf dist/${{ env.APP_NAME }}_${{ github.ref_name }}_darwin_amd64.tar.gz ${{ env.APP_NAME }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: darwin-amd64
          path: dist/*.tar.gz

  # ───────────────────────────────
  # Release job (collect & publish)
  # ───────────────────────────────
  release:
    needs:
      - build-linux
      - build-macos
      # - build-macos-amd64
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/**/*.tar.gz
          draft: false          # 必要なら true
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
