package embedding_test

import (
	"testing"

	"github.com/trknhr/ghosttype/model"
	"github.com/trknhr/ghosttype/model/embedding"
	"github.com/trknhr/ghosttype/ollama"
)

type MockClient struct {
	EmbedFunc    func(text string) (*ollama.OllamaEmbedResponse, error)
	GenerateFunc func(prompt string) (*ollama.OllamaCompleteResponse, error)
}

func (m *MockClient) Embed(text string) (*ollama.OllamaEmbedResponse, error) {
	if m.EmbedFunc != nil {
		return m.EmbedFunc(text)
	}
	return nil, nil
}

func (m *MockClient) Generate(prompt string) (*ollama.OllamaCompleteResponse, error) {
	if m.GenerateFunc != nil {
		return m.GenerateFunc(prompt)
	}
	return nil, nil
}

type MockStore struct {
	ExistsFunc        func(string, string) bool
	SaveFunc          func(string, string, []float32) error
	SearchSimilarFunc func([]float32, string, int, float64) ([]model.Suggestion, error)
}

func (m *MockStore) Exists(source, text string) bool {
	if m.ExistsFunc != nil {
		return m.ExistsFunc(source, text)
	}
	return false
}

func (m *MockStore) Save(source, text string, vec []float32) error {
	if m.SaveFunc != nil {
		return m.SaveFunc(source, text, vec)
	}
	return nil
}

func (m *MockStore) SearchSimilar(vec []float32, source string, topK int, threshold float64) ([]model.Suggestion, error) {
	if m.SearchSimilarFunc != nil {
		return m.SearchSimilarFunc(vec, source, topK, threshold)
	}
	return nil, nil
}

// func setupTestStore(t *testing.T) *embedding.EmbeddingStore {
// 	db, err := sql.Open("libsql", ":memory:")
// 	if err != nil {
// 		t.Fatalf("failed to open db: %v", err)
// 	}
// 	_, err = db.Exec(`
// 		CREATE TABLE IF NOT EXISTS embeddings (
// 			id INTEGER PRIMARY KEY AUTOINCREMENT,
// 			source TEXT NOT NULL,
// 			text TEXT NOT NULL,
// 			emb F32_BLOB(768),
// 			created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
// 		);
// 	`)

// 	if err != nil {
// 		t.Fatalf("failed to create table: %v", err)
// 	}
// 	_, err = db.Exec(`CREATE INDEX embeddings_idx ON embeddings(libsql_vector_idx(emb))`)
// 	if err != nil {
// 		t.Fatalf("failed to create index: %v", err)
// 	}
// 	return embedding.NewEmbeddingStore(db)
// }

// func TestEmbeddingModel_LearnAndPredict(t *testing.T) {
// 	store := setupTestStore(t)

// 	mockClient := &MockClient{
// 		EmbedFunc: func(text string) (*ollama.OllamaEmbedResponse, error) {
// 			return &ollama.OllamaEmbedResponse{Embedding: []float32{0.3961247, 1.6123672, -3.4906282, -0.38798043, 0.9009716, 0.13019274, 0.5684369, 0.32242858, -1.0180141, 1.122717, -0.002547063, 0.97599566, 0.43029845, 0.19449034, 0.55053973, 0.16000052, 0.80888665, -0.6342183, 0.25418574, 0.6351743, -0.04287299, -0.0006376598, -0.30811077, -0.56242245, 2.6386294, -0.039872568, 0.99637383, -0.4576149, -0.4118141, 0.7581109, 0.8073257, -0.6873892, 0.40393794, 0.24327348, -1.5380815, 0.26237613, -0.0048589874, -1.22309, -0.9860581, -0.58291286, 0.37725052, -0.8523733, 0.1870324, -0.9012388, -0.8076614, -1.3177893, 1.051261, 0.60628104, 0.19306743, -0.73954934, -0.20767061, -1.1296062, -0.38431954, -1.5727625, 0.124050096, -0.4449345, -0.33030885, -1.4045589, -0.41556033, -1.3257288, -0.07674359, 0.20902683, -0.033260874, 1.7402499, -0.113169946, -0.5243117, -0.16418359, 0.50073344, -0.526933, -1.0455234, 0.80244035, -0.26533517, 1.3996861, 0.16660644, -0.21218441, -0.5360003, -1.7421234, -0.016267087, -1.2803918, 0.13811004, 1.4262989, -0.6078803, 1.5529609, -0.48293063, 1.6852086, -0.24362105, 0.58170056, 0.71490824, 0.14963701, 1.3540759, 0.5707841, -0.33977097, -0.36553934, 0.036682338, -1.4060935, 1.1299002, 0.08332114, 1.6744848, -0.9211538, -0.3355972, -0.10493736, -0.49514794, 0.34393424, -1.504342, 0.040445305, -0.03189081, -0.46806297, 0.95930684, 1.6010288, 0.0055878665, -0.3271941, 0.50319445, -0.34909555, -0.5083904, 1.0701652, -0.59115034, 1.004944, -0.43484327, 0.17556825, -0.6511018, 0.39615023, 0.120063685, 0.21971315, 0.6863082, -0.25752854, -0.1687834, -1.2607975, -1.3307447, 0.6909361, -0.858254, -0.5121225, 0.59478235, -0.536236, -0.5132904, 0.81119543, 0.50513595, -1.2047974, -1.0153824, 0.85528517, -0.50443244, -0.7165204, -0.24060546, 0.19881591, 0.07849255, -0.43089247, 0.16490118, 0.8486682, -0.9198226, -1.3536383, -0.073213786, 0.58624625, 0.31012207, -0.005442191, 1.1332316, 1.0232021, -1.0054529, 1.4149929, 0.70483893, 0.22397745, 0.31598955, -0.08224055, 0.097491086, -1.2760267, 0.29077405, -0.5443269, -0.6094543, -0.47443998, 1.4299277, 0.7537015, 0.61093795, -0.4162591, 0.3925741, 0.004321469, -0.22129868, -0.011154017, 0.21532592, -0.9884604, -0.832399, 0.5073528, -0.62952477, 0.36438808, -0.92735237, 0.9861114, -0.005816143, -0.6752217, -0.67034227, 1.2739003, -0.47905046, -0.4556774, -0.9143429, 0.36140072, 0.2468563, -0.4438306, 0.13588728, -0.6108355, -0.26911443, 1.3192486, 0.26036558, 0.76237017, -1.0556613, -1.1391065, 0.2584767, 0.9837368, -0.3005728, -1.04536, 1.8863783, -1.0813998, 1.2713022, 0.2560254, -0.63457286, 1.485904, -1.5436567, 0.54177785, -0.2163479, -0.064407215, -0.81709784, 0.0033271015, -0.938407, -1.239456, 0.75985706, 0.079694934, 0.346435, 0.9432084, 0.3494814, -0.2042174, -0.8346864, -0.39199376, 0.26878, -0.27035472, 0.46891353, -0.65003246, -0.46865138, 0.3253416, -0.033828314, 0.24303484, 1.0244151, 0.30393156, 1.8863595, -0.6490744, 0.7226869, 0.3215599, 1.1894006, -0.14411332, -0.44519085, -0.7118431, 0.2790105, 0.38662314, -0.034135066, -0.23793837, -0.01603734, -0.5266767, 0.7246535, 0.35390788, 0.9492266, 0.017045416, 0.35552132, -0.3706969, 0.116221115, 0.40664193, -0.853757, 0.44721735, -0.31964937, -0.32399064, -0.20797431, 0.5007804, -0.7998741, -0.6401889, 0.272871, 0.22196814, -1.1972394, 0.7532569, 1.7589407, 0.4941015, 1.2080684, -0.74411553, -0.884106, 1.2498983, -0.6427295, -1.0194256, 0.18414368, -1.5710385, -1.2002118, -0.49719787, 0.30045095, -0.07334232, 0.6162132, 0.7317624, -0.5983449, 0.2768477, 0.25709188, 1.3395684, -0.29853266, 0.76267165, 1.5015532, -0.13310888, 0.19192988, 0.66341877, -0.9042814, 0.5158558, -0.5666536, 0.6869777, -0.53448915, 0.049304374, 0.12622847, 0.53144586, -1.7389752, 2.1569002, -0.90694344, -0.8217891, 0.5724834, 0.29854175, 0.3397518, 0.21265854, 1.0733689, -2.177013, -0.4184441, 0.7449475, -0.20300627, 1.75189, -0.008047637, -0.05106874, -0.3846249, -0.929979, -0.14438128, -0.21823868, 1.6370912, 0.40914634, 0.8308121, -0.1247589, -0.67895114, -0.46661615, 0.74468696, 0.15794666, -0.8762147, -0.45378444, -0.3049945, 0.103601485, -0.0016705822, 0.19925374, 0.6652249, 0.4437705, 0.21055496, -0.78526425, 0.46834832, 0.25282422, -0.242073, 0.17191663, 0.66506976, 0.27348977, 0.33087847, -1.8082826, -0.07630257, -0.32440764, -0.5923764, 0.45991194, -1.1712519, 0.6575851, 0.39654583, -0.35868567, -0.8519301, 1.2814714, 1.3437287, -0.12490937, 0.38514486, 0.2603055, 0.3171146, 2.3029351, 0.89547354, 1.0765139, 1.3253305, 0.76966935, -1.3720403, 0.41842198, 0.92082244, 0.48294407, -0.061827146, -0.46882677, 0.5604148, -0.41279405, 0.61469555, 0.6602821, -0.5880714, 0.12278298, -0.6854688, 0.37408283, -0.6075635, 0.7558481, 0.68120986, 1.549993, 0.06064202, 0.043122113, -1.2702858, -2.08633, -0.2159911, -0.26072216, 0.3382819, 0.18189885, 0.114610955, -0.072485946, 0.12168574, -0.9392784, -0.68138725, 0.4535375, -0.87122744, -1.0348377, 0.3926006, -0.2671119, -0.338643, 1.4539886, -1.5093083, -0.23705949, -0.0887112, 0.00061701797, -0.29706076, 0.5434131, -0.24975006, 1.359839, 0.39044276, -1.1510764, -0.09569555, 1.014503, 1.2126676, 0.77416515, 0.81871164, 0.7832277, -0.5131012, 0.65479046, 0.35591015, 0.2983859, -1.6085439, 0.11177112, 0.3610831, 1.0068079, -0.37992916, 0.468065, 0.09804415, 0.5210401, -0.3305122, -0.5996553, 1.61852, 1.668408, -1.0171514, -0.8218945, 0.87084436, 0.8009588, 2.2618544, 1.0554106, -0.95557827, -0.505927, 0.8850641, 0.28272504, -1.0283201, 0.5913629, -0.22816972, 1.996515, -0.5026864, 0.23386818, -0.85114384, -0.43971813, 0.3389545, 0.13335803, -0.27617583, -0.16198035, 0.07225589, 0.80564606, -0.5554761, -1.2507465, -0.24629673, 0.6746564, 1.019554, -0.483022, 0.52153516, 0.8622077, 0.11640394, 0.43468395, 0.0064021647, 0.48286113, 0.11082873, 0.88199234, 0.45174694, 1.411295, -0.11862655, -0.64520144, -1.4916874, 0.73171484, 1.1741072, 1.4306842, 0.7944904, 0.5175562, -0.79383767, 0.6105147, 0.41059035, -0.4118669, -0.6187934, -0.49986428, 1.3348471, -0.46180588, 1.3225759, 0.28952357, -0.19881468, 1.0111295, 0.58557576, 0.08312641, 0.40301755, 0.042059764, -1.3947886, -0.23308377, -2.2154343, -1.0791484, 0.5399927, -0.96667945, 0.3715406, 0.19236277, 0.022565234, 0.92652345, 0.29325345, -1.3291521, -0.82370853, -0.98123085, -0.47265625, 0.38050988, -0.23374201, -0.30758417, -0.4602065, 0.12422475, 1.4627864, -1.2268612, 0.57516223, -0.5446527, -0.39810878, 0.03759613, 0.13844292, -0.76317775, -1.2019045, -0.27937466, 0.34546992, 1.6041956, 0.53657067, 0.48146573, -1.5370437, -0.47120386, 0.82905376, -0.23114702, -0.42436257, -0.6632779, 0.32145947, -1.4289141, -0.89368856, -1.8139032, -2.300917, 0.8586662, 0.30173713, -0.41536552, -0.5652689, 0.072255515, -0.38644576, -1.2022495, -1.3314339, 0.75297546, -0.26246095, 0.010795619, 0.32728553, 1.4710698, -0.66730064, 1.6804218, -0.085676804, 0.15575404, 0.46984196, 0.94847405, 0.7404718, -0.60653776, 0.65068424, 0.5073428, 0.9975603, -1.0882512, 0.033191293, -0.33806953, -0.06321507, -1.2508284, 0.42685074, -0.38398376, 0.9091762, 0.6215636, 0.123001374, -0.2950494, -0.20247066, -0.18054356, -1.0986551, 1.5352451, -0.29909173, -0.32359245, -0.039591037, -0.6445416, -0.62520015, 0.030856993, 0.32651484, -0.18241407, -1.5437738, 0.66884327, 0.31386003, -0.04311046, 1.1355871, 1.0380682, -0.40353322, -0.6725362, 0.16684668, -0.31294316, 0.026887985, 0.26288033, -0.45128292, 0.6568495, 0.4630266, -0.28037992, 0.06842557, 1.3314781, -0.5270389, -0.31124383, -0.21915363, -0.49492773, -1.185998, -1.0637442, -1.6206144, 0.02873148, -0.39189106, 0.13067144, -0.19970188, -0.055402584, -1.3837812, -0.9840667, 0.63198096, 0.23596409, 0.42924628, -1.7964438, -1.1323738, -1.9813638, -0.5127251, -0.0650095, 0.21127346, -0.6884975, 0.29354772, 1.007196, -0.57208914, -0.38521346, 0.5139425, -0.5821969, 0.024325477, 0.022653148, 0.89040303, 1.2335975, 0.30560362, 1.5667887, 0.8423403, -0.07219851, -0.6585356, -0.8043932, 0.33128372, 1.0871124, -1.2316504, -0.7711947, -0.8092095, -0.25298172, -0.8643336, -0.52761674, 0.8356776, 0.0069757737, 0.26822853, 0.15296848, 0.3712056, -1.2233621, -0.04961826, 0.35727388, 1.1773846, -0.9015168, 0.40760857, 1.0410684, 0.36036783, -0.2749361, 0.056672696, 0.29026, -1.211101, -0.17858243, -0.41211724, 0.47504103, 0.17003371, -0.042751323, 0.040229883, 0.9698762, 0.36865178, -1.1149185, -0.36288673, -0.5016082, -0.27564707, 0.22531973, 0.70306873, -1.0760963, 0.54102695, -0.2622908, 0.4691198, -0.44379392, 1.4502558, 0.20158559, 0.07531521, -0.8138771, 0.5919008, -1.9473559, 0.5888565, -0.4248931, -0.90824616, 0.52446306, -0.5644809, 0.8342862, -0.5852465, -0.3544705, 0.5768024, 1.1772412, 2.0202224, -0.027832411, 0.3098595, 1.3741825, 0.17115866, 2.3143897, 0.07619616, -1.5353858, -1.1575513, -0.560308, -0.4332738, 0.5438297, -0.95287055, 0.6800946, -0.5890295, 0.9187306, -1.9255171, -0.11136857, -0.23802006, 0.0033862963, -0.062067643, -1.2858677, -0.39209008, -1.1023537, -0.13489848, -0.13550232, 0.20748697, -1.1483397, 1.8292533, -0.25809735, 0.523109, -0.48714593, 0.9927696, -0.4451707, 0.06287747, 1.158355, -0.34909666, 0.5855476, 0.29294866, -0.55143327, 0.3844567, -1.4682604, 0.39104337, 2.2109332, -0.076630555, -0.7191844, -0.6804976, 0.88783944, 0.17757703, -0.23990747, -0.8786603, -1.1818123, -0.23830682}}, nil
// 		},
// 	}

// 	model := embedding.NewModel(store, mockClient)

// 	// Learn
// 	err := model.Learn([]string{"git push", "npm install"})
// 	if err != nil {
// 		t.Fatalf("Learn failed: %v", err)
// 	}

// 	// Predict
// 	results, err := model.Predict("git")
// 	if err != nil {
// 		t.Fatalf("Predict failed: %v", err)
// 	}

// 	if len(results) == 0 {
// 		t.Errorf("expected at least 1 result, got 0")
// 	}
// 	for _, r := range results {
// 		if r.Source != "history" {
// 			t.Errorf("unexpected source: %s", r.Source)
// 		}
// 	}
// }

func TestEmbeddingModel_LearnAndPredict_WithMocks(t *testing.T) {
	embedCalled := 0
	saveCalled := 0
	predictCalled := 0

	mockClient := &MockClient{
		EmbedFunc: func(text string) (*ollama.OllamaEmbedResponse, error) {
			embedCalled++
			return &ollama.OllamaEmbedResponse{Embedding: []float32{0.1, 0.2, 0.3}}, nil
		},
	}

	mockStore := &MockStore{
		ExistsFunc: func(source, text string) bool {
			return false
		},
		SaveFunc: func(source, text string, vec []float32) error {
			saveCalled++
			return nil
		},
		SearchSimilarFunc: func(vec []float32, source string, topK int, threshold float64) ([]model.Suggestion, error) {
			predictCalled++
			return []model.Suggestion{
				{Text: "git push", Score: 0.9, Source: source},
			}, nil
		},
	}

	model := embedding.NewModel(mockStore, mockClient)

	err := model.Learn([]string{"git push", "npm install"})
	if err != nil {
		t.Fatalf("Learn failed: %v", err)
	}

	if saveCalled != 2 {
		t.Errorf("expected Save to be called 2 times, got %d", saveCalled)
	}

	results, err := model.Predict("git")
	if err != nil {
		t.Fatalf("Predict failed: %v", err)
	}

	if len(results) != 1 || results[0].Text != "git push" {
		t.Errorf("unexpected prediction result: %+v", results)
	}

	if embedCalled != 3 {
		t.Errorf("expected Embed to be called 3 times, got %d", embedCalled)
	}
	if predictCalled != 1 {
		t.Errorf("expected SearchSimilar to be called once")
	}
}
