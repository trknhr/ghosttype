// Code generated by MockGen. DO NOT EDIT.
// Source: internal/history/loader.go

// Package history is a generated GoMock package.
package history

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockHistoryLoader is a mock of HistoryLoader interface.
type MockHistoryLoader struct {
	ctrl     *gomock.Controller
	recorder *MockHistoryLoaderMockRecorder
}

// MockHistoryLoaderMockRecorder is the mock recorder for MockHistoryLoader.
type MockHistoryLoaderMockRecorder struct {
	mock *MockHistoryLoader
}

// NewMockHistoryLoader creates a new mock instance.
func NewMockHistoryLoader(ctrl *gomock.Controller) *MockHistoryLoader {
	mock := &MockHistoryLoader{ctrl: ctrl}
	mock.recorder = &MockHistoryLoaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHistoryLoader) EXPECT() *MockHistoryLoaderMockRecorder {
	return m.recorder
}

// GetCurrentMtime mocks base method.
func (m *MockHistoryLoader) GetCurrentMtime() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentMtime")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentMtime indicates an expected call of GetCurrentMtime.
func (mr *MockHistoryLoaderMockRecorder) GetCurrentMtime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentMtime", reflect.TypeOf((*MockHistoryLoader)(nil).GetCurrentMtime))
}

// Key mocks base method.
func (m *MockHistoryLoader) Key() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Key")
	ret0, _ := ret[0].(string)
	return ret0
}

// Key indicates an expected call of Key.
func (mr *MockHistoryLoaderMockRecorder) Key() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Key", reflect.TypeOf((*MockHistoryLoader)(nil).Key))
}

// LoadCommands mocks base method.
func (m *MockHistoryLoader) LoadCommands() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadCommands")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadCommands indicates an expected call of LoadCommands.
func (mr *MockHistoryLoaderMockRecorder) LoadCommands() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadCommands", reflect.TypeOf((*MockHistoryLoader)(nil).LoadCommands))
}

// LoadTail mocks base method.
func (m *MockHistoryLoader) LoadTail(n int) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadTail", n)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadTail indicates an expected call of LoadTail.
func (mr *MockHistoryLoaderMockRecorder) LoadTail(n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadTail", reflect.TypeOf((*MockHistoryLoader)(nil).LoadTail), n)
}

// Path mocks base method.
func (m *MockHistoryLoader) Path() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Path")
	ret0, _ := ret[0].(string)
	return ret0
}

// Path indicates an expected call of Path.
func (mr *MockHistoryLoaderMockRecorder) Path() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockHistoryLoader)(nil).Path))
}
